# def person(first_name, last_name, age, city):
#     return (f'{first_name} {last_name} är {age} år gammal och bor i {city}')


# person1 = person(first_name='Janne', last_name='svart',
#                  age=34, city='stockholm')

# print(person1)


# my_list = [1, 2, 3, 4, 5, 6]


# def min_lista(nummer):
#     for x in nummer:
#         print(x)


# min_lista(my_list)


# my_other_list = [5, 6, 7, 8, 9, 10]


# def min_nya_lista(annan_lista):
#     for x in annan_lista:
#         return annan_lista[0:3]


# tre_forsta = min_nya_lista(my_other_list)
# print(tre_forsta)


# class bus():
#     def __init__(self, seats):
#         self.seats = seats

#     def print_seats(self):
#         print(f'Bus has {self.seats} seats')


# bus_instans = bus(seats=4)
# bus_instans.print_seats()
# bus_instans2 = bus(seats=65)
# bus_instans2.print_seats()


# class myCar():
#     def __init__(self, brand, model):
#         self.brand = brand
#         self.model = model

#     def return_string(self):
#         return f'Car brand is {self.brand} and model is {self.model}'


# thecar_instans = myCar(brand='Toyota', model='Yaris')
# string_returned = thecar_instans.return_string()
# print(string_returned)


# class Person():
#     def __init__(self, name, age):
#         self.name = name
#         self.age = age

#     def return_age(self):
#         return 2022-self.age

#     def return_year_born(self):
#         year_born = self.return_age()
#         print(year_born)

#     def return_name(self):
#         print(self.name)


# person1 = Person(name='Anna', age=86)
# person1.return_year_born()
# person2 = Person(name='Astrid', age=12)
# person2.return_year_born()
# person2.return_name()


# class Vehicle():
#     def __init__(self, color, weight, number_wheels):
#         self.color = color
#         self.weight = weight
#         self.number_wheels = number_wheels

#     def return_color(self):
#         return self.color

#     def return_weight(self):
#         return self.weight

#     def return_wheels(self):
#         return self.number_wheels


# class Car(Vehicle):
#     def __init__(self, color, weight, number_wheels, brand):
#         Vehicle.__init__(self, color=color, weight=weight,
#                          number_wheels=number_wheels)
#         self.brand = brand

#     def return_brand(self):
#         return self.brand


# car_instans = Car(color='blue', weight=1500,
#                   number_wheels=4, brand='Ferrari')
# color = car_instans.return_color()
# brand = car_instans.return_brand()

# print(f'The color is {color}')
# print(f'The brand is {brand}')


weak_passwords = [
    '123456',
    '123456789',
    'Qwerty',
    'Password',
    '12345',
    '12345678',
    '111111',
    '1234567',
    '123123',
    'Qwerty123',
    '1q2w3e',
    '1234567890',
    'DEFAULT',
    '0',
    'Abc123',
    '654321',
    '123321',
    'Qwertyuiop',
    'Iloveyou',
    '666666',
]


class PasswordChecker():
    def __init__(self, password, weak_passwords):
        self.password = password
        self.weak_passwords = weak_passwords

    def is_password_length_ok(self):
        if len(self.password) > 8:
            return True
        else:
            return False

    def is_password_weak(self):
        if self.password in self.weak_passwords:
            return False
        else:
            return True

    def has_password_at_least_two_numbers(self):
        if len([x for x in self.password if x.isdigit()]) > 2:
            return True
        else:
            return False

    def has_password_at_least_two_capital_letters(self):
        if self.password.isupper():
            return True
        else:
            return False

    def do_password_validation(self):
        Kom på en smart funktion
        conditions =
            self.is_password_length_ok() == True, 
            self.is_password_length_ok() == True, 
            self.is_password_weak() == True, 
            self.has_password_at_least_two_numbers() == True, 
            self.has_password_at_least_two_capital_letters() == True
        if all(conditions):
            print(f'all is true')
        else:
            print(f'Not true')


my_instance = PasswordChecker(
    password='HH123sdfds', weak_passwords=weak_passwords)
print(my_instance.do_password_validation())

